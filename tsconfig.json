{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    // "incremental": true,                         /* Enable incremental compilation */
    "target": "es5" /* 指定编译后的js目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ES2021', or 'ESNEXT'. */,
    "module": "commonjs" /* 指定模块标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
    "lib": ["es6", "dom"] /* 指定编译中包含的库文件. */,
    // "allowJs": true,                             /* 是否编译js. */
    // "checkJs": true,                             /* 是否检查js文件中的错误. */
    // "jsx": "preserve",                           /* 指定JSX环境: 'preserve', 'react-native', 'react', 'react-jsx' or 'react-jsxdev'. */
    // "declaration": true,                         /* 是否在编译后生成相应的'.d.ts'声明文件. declaration和allowJs不能同时设置为true.*/
    // "declarationMap": true,                      /* 是否为'.d.ts'生成sourcemap. */
    // "sourceMap": true,                           /* 是否生成'.map'文件. */
    // "outFile": "./",                             /* 将编译结果合并为一个输出文件.只有module设为umd或者system才支持此选项 */
    // "outDir": "./",                              /* 输出文件夹路径. */
    // "rootDir": "./",                             /* 指定编译文件的根目录,编译器会在根目录查找入口文件,如果编译器发现以rootdir为根目录的入口文件不会把所有文件加载进去的话会报错,但不会停止编译 */
    // "composite": true,                           /* 是否编译引用的项目 */
    // "tsBuildInfoFile": "./",                     /* Specify file to store incremental compilation information */
    // "removeComments": true,                      /* 是否保留注释. */
    // "noEmit": true,                              /* 不生成编译文件.很少用 */
    // "importHelpers": true,                       /* 是否引入'tslib'中的工具函数. */
    // "downlevelIteration": true,                  /* 当构建目标为'es5'或'es3'时为'for-of','spread','destructuring'中的迭代器提供完全支持. */
    // "isolatedModules": true,                     /* 是否将每个文件视为单独模块 (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    // "strict": true,                                 /* 开启所有严格类型检查. */
    // "noImplicitAny": true,                       /* 不明却设置类型就会报错. */
    "strictNullChecks": true /* 为true时null和undefined不能赋给非这两种类型的值(例外:undefined可以赋值给void).别的类型除了any也不能赋给他们 */,
    // "strictFunctionTypes": true,                 /* 是否检查函数参数双向协变. */
    // "strictBindCallApply": true,                 /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,        /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                      /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                        /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                      /* Report errors on unused locals. */
    // "noUnusedParameters": true,                  /* Report errors on unused parameters. */
    // "noImplicitReturns": true,                   /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,          /* Report errors for fallthrough cases in switch statement. */
    // "noUncheckedIndexedAccess": true,            /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                  /* Ensure overriding members in derived classes are marked with an 'override' modifier. */
    // "noPropertyAccessFromIndexSignature": true,  /* Require undeclared properties from index signatures to use element accesses. */

    /* Module Resolution Options */
    // "moduleResolution": "node",                  /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                             /* Base directory to resolve non-absolute module names. */
    // "paths": {},                                 /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                              /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                             /* List of folders to include type definitions from. */
    // "types": [],                                 /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,        /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // "preserveSymlinks": true,                    /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,                /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                            /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                               /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                     /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                       /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    "experimentalDecorators": true /* Enables experimental support for ES7 decorators. */,
    "emitDecoratorMetadata": true /* Enables experimental support for emitting type metadata for decorators. */,

    /* Advanced Options */
    "skipLibCheck": true /* Skip type checking of declaration files. */,
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */
  },
  // "files": [], // 包含指定文件的相对或绝对路径，编译器只会编译包含在files中的文件。如果不指定，则取决于有没有配置include选项，如果没有include选项，则默认会编译根目录以及所有子目录的文件。列出的路径必须是文件路径，不能是文件夹路径。而且不能使用* ? **/等通配符
  "include": ["./src/**/*.ts", "./src/**/*.d.ts"] // 也可以指定需要编译的路径列表，与files的区别就是可以使用文件夹路径也可以使用文件路径，而且可以使用通配符。
  // "exclude": [], // 与include相反
  // "extends": "" // 可以指定一个其他的tsconfig的配置文件路径，继承这个文件中的配置，继承来的配置会覆盖当前文件的同名配置。支持来自nodejs包中的tsconfig配置文件。
  // "compileOnSave": true, // 保存时重新编译
  // "references": [] // 指定要引用的项目
}
